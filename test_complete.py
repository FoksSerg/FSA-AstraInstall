#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
"""

import ast
import sys
import os
import subprocess
import json

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

def test_main_file_compilation():
    """–¢–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        result = subprocess.run([sys.executable, '-m', 'py_compile', 'astra_automation.py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è astra_automation.py —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ astra_automation.py:")
            print("   STDOUT: %s" % result.stdout)
            print("   STDERR: %s" % result.stderr)
            return False
            
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: %s" % str(e))
        return False

def test_embedded_modules_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å–µ—Ö –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        import importlib.util
        spec = importlib.util.spec_from_file_location("astra_automation", "astra_automation.py")
        astra_automation = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(astra_automation)
        
        # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è)
        modules = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –∫–ª–∞—Å—Å—ã
        print("‚úÖ –í—Å–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –∫–ª–∞—Å—Å—ã:")
        print("   ‚Ä¢ InteractiveConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("   ‚Ä¢ RepoChecker - –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        print("   ‚Ä¢ SystemStats - –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        print("   ‚Ä¢ InteractiveHandler - –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("   ‚Ä¢ SystemUpdater - –∫–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
        print("   ‚Ä¢ AutomationGUI - –∫–ª–∞—Å—Å –¥–ª—è GUI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return True
        
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª–µ–π: %s" % str(e))
        return False

def test_config_json_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ JSON - —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω –≤ –∫–ª–∞—Å—Å InteractiveConfig"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        import importlib.util
        spec = importlib.util.spec_from_file_location("astra_automation", "astra_automation.py")
        astra_automation = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(astra_automation)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å InteractiveConfig
        config = astra_automation.InteractiveConfig()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –æ—Ç–≤–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        if hasattr(config, 'patterns') and hasattr(config, 'responses'):
            print("‚úÖ –ö–ª–∞—Å—Å InteractiveConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print("   ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: %d" % len(config.patterns))
            print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã: %d" % len(config.responses))
            return True
        else:
            print("‚ùå –ö–ª–∞—Å—Å InteractiveConfig –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
        
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ InteractiveConfig: %s" % str(e))
        return False

def test_installer_script():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    installer_file = 'astra_install.sh'
    if not os.path.exists(installer_file):
        print("‚ö†Ô∏è  –§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç" % installer_file)
        return True
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å bash —Å–∫—Ä–∏–ø—Ç–∞
        result = subprocess.run(['bash', '-n', installer_file], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å %s –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" % installer_file)
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ %s:" % installer_file)
            print("   STDERR: %s" % result.stderr)
            return False
            
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ %s: %s" % (installer_file, str(e)))
        return False

def test_file_permissions():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º...")
    
    files_to_check = [
        'astra_automation.py',
        'astra_install.sh'
    ]
    
    all_ok = True
    
    for filename in files_to_check:
        if os.path.exists(filename):
            if os.access(filename, os.R_OK):
                print("‚úÖ –§–∞–π–ª %s –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è" % filename)
            else:
                print("‚ùå –§–∞–π–ª %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è" % filename)
                all_ok = False
        else:
            print("‚ö†Ô∏è  –§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω" % filename)
    
    return all_ok

def run_complete_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("=" * 60)
    print("üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò –ò –°–ò–ù–¢–ê–ö–°–ò–°–ê")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ö–æ–º–ø–∏–ª—è—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", test_main_file_compilation),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π", test_embedded_modules_syntax),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JSON", test_config_json_syntax),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", test_installer_script),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º", test_file_permissions)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_function in tests:
        print("\n" + "=" * 40)
        print("üìã %s" % test_name)
        print("=" * 40)
        
        try:
            if test_function():
                passed_tests += 1
                print("‚úÖ %s: –ü–†–û–ô–î–ï–ù" % test_name)
            else:
                print("‚ùå %s: –ü–†–û–í–ê–õ–ï–ù" % test_name)
        except Exception as e:
            print("üí• %s: –û–®–ò–ë–ö–ê - %s" % (test_name, str(e)))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 60)
    print("–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: %d –∏–∑ %d" % (passed_tests, total_tests))
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("üí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return False

if __name__ == '__main__':
    success = run_complete_test()
    sys.exit(0 if success else 1)
