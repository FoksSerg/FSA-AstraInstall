#!/bin/bash
# –ì–õ–ê–í–ù–´–ô –°–ö–†–ò–ü–¢: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ GUI

# ============================================================
# –ë–õ–û–ö 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –õ–û–ì–û–í –ò –§–£–ù–ö–¶–ò–ô
# ============================================================

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å –∑–∞–ø—É—Å–∫–∞—é—â–∏–º —Ñ–∞–π–ª–æ–º
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="$SCRIPT_DIR/astra_automation_$TIMESTAMP.log"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {
    local message="$1"
    local timestamp=$(date +"%H:%M:%S.%3N")
    echo "[$timestamp] [BASH] $message" >> "$LOG_FILE"
    echo "$message"  # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
check_single_repo() {
    local repo_line="$1"
    local test_file=$(mktemp)
    echo "$repo_line" > "$test_file"

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–∞–∫—Ç-–¥–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if [[ "$repo_line" =~ cdrom: ]]; then
        echo "   ‚ö†Ô∏è –ö–æ–º–ø–∞–∫—Ç-–¥–∏—Å–∫: $(echo "$repo_line" | awk '{print $2}') - –æ—Ç–∫–ª—é—á–∞–µ–º"
        log_message "–ö–æ–º–ø–∞–∫—Ç-–¥–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ç–∫–ª—é—á–µ–Ω: $(echo "$repo_line" | awk '{print $2}')"
        rm -f "$test_file"
        return 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1 —á—Ç–æ–±—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω
    fi

    if apt-get update -o Dir::Etc::sourcelist="$test_file" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" &>/dev/null; then
        echo "   ‚úÖ –†–∞–±–æ—á–∏–π: $(echo "$repo_line" | awk '{print $2}')"
        log_message "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ä–∞–±–æ—á–∏–π: $(echo "$repo_line" | awk '{print $2}')"
        rm -f "$test_file"
        return 0
    else
        echo "   ‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω: $(echo "$repo_line" | awk '{print $2}')"
        log_message "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: $(echo "$repo_line" | awk '{print $2}')"
        rm -f "$test_file"
        return 1
    fi
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥ —Ñ–∞–π–ª
echo "============================================================" > "$LOG_FILE"
echo "ASTRA AUTOMATION - –ù–ê–ß–ê–õ–û –°–ï–°–°–ò–ò" >> "$LOG_FILE"
echo "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $(date)" >> "$LOG_FILE"
echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: $SCRIPT_DIR" >> "$LOG_FILE"
echo "–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: $*" >> "$LOG_FILE"
echo "============================================================" >> "$LOG_FILE"

echo "============================================================"
echo "ASTRA AUTOMATION - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ò –ó–ê–ü–£–°–ö"
echo "============================================================"
log_message "–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ astra_install.sh"

# ============================================================
# –ë–õ–û–ö 2: –û–ë–†–ê–ë–û–¢–ö–ê –ê–†–ì–£–ú–ï–ù–¢–û–í –ò –ü–†–û–í–ï–†–ö–ò
# ============================================================

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
CONSOLE_MODE=false
DRY_RUN=false

for arg in "$@"; do
    case $arg in
        --console)
            CONSOLE_MODE=true
            echo "üìã –†–µ–∂–∏–º: –ö–û–ù–°–û–õ–¨–ù–´–ô (–±–µ–∑ GUI)"
            log_message "–í–∫–ª—é—á–µ–Ω –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (--console)"
            ;;
        --dry-run)
            DRY_RUN=true
            echo "üìã –†–µ–∂–∏–º: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï (dry-run)"
            log_message "–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (--dry-run)"
            ;;
        *)
            echo "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $arg"
            log_message "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $arg"
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤"
    log_message "–û–®–ò–ë–ö–ê: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo bash astra_install.sh"
    exit 1
fi

log_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root: OK (–∑–∞–ø—É—â–µ–Ω–æ —Å –ø—Ä–∞–≤–∞–º–∏ root)"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
export DEBIAN_FRONTEND=noninteractive
log_message "–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"

echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É..."
log_message "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Astra Linux
if [ -f /etc/astra_version ]; then
    ASTRA_VERSION=$(cat /etc/astra_version)
    echo "   üìã –í–µ—Ä—Å–∏—è Astra Linux: $ASTRA_VERSION"
    log_message "–í–µ—Ä—Å–∏—è Astra Linux: $ASTRA_VERSION"
else
    echo "   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é Astra Linux"
    log_message "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é Astra Linux"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
PYTHON3_VERSION=$(python3 --version 2>/dev/null || echo '–Ω–µ –Ω–∞–π–¥–µ–Ω')
echo "   üìã Python 3: $PYTHON3_VERSION"
log_message "Python 3: $PYTHON3_VERSION"

# ============================================================
# –ë–õ–û–ö 3: –ö–û–ù–°–û–õ–¨–ù–´–ô –†–ï–ñ–ò–ú
# ============================================================

if [ "$CONSOLE_MODE" = true ]; then
    echo ""
    echo "üîß –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è Python 3"
    log_message "–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è Python 3"
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    echo ""
    echo "üéâ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏!"
    log_message "–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
    
    echo "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞..."
    log_message "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
    
    echo "   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏..."
    log_message "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
    
    if [ "$DRY_RUN" = true ]; then
        echo "   ‚ö†Ô∏è –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è (—Ç–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è)"
        log_message "–†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è (—Ç–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è)"
        
        echo "   üìã –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω backup: /etc/apt/sources.list.backup"
        echo "   üìã –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
        echo "   üìã –ù–µ—Ä–∞–±–æ—á–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±—É–¥—É—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã"
        echo "   üìã –†–∞–±–æ—á–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏"
        
        ACTIVATED_COUNT=0
        DEACTIVATED_COUNT=0
        
        while IFS= read -r line; do
            if [[ "$line" =~ ^#?deb ]]; then
                if [[ "$line" == \#* ]]; then
                    clean_line="${line#\#}"
                    clean_line="$(echo "$clean_line" | sed 's/^[[:space:]]*//')"
                    if check_single_repo "$clean_line"; then
                        ACTIVATED_COUNT=$((ACTIVATED_COUNT + 1))
                        echo "   ‚úÖ –ë—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: $(echo "$clean_line" | awk '{print $2}')"
                    else
                        DEACTIVATED_COUNT=$((DEACTIVATED_COUNT + 1))
                        echo "   ‚ùå –û—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º: $(echo "$clean_line" | awk '{print $2}')"
                    fi
                else
                    if check_single_repo "$line"; then
                        ACTIVATED_COUNT=$((ACTIVATED_COUNT + 1))
                        echo "   ‚úÖ –û—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º: $(echo "$line" | awk '{print $2}')"
                    else
                        DEACTIVATED_COUNT=$((DEACTIVATED_COUNT + 1))
                        echo "   ‚ùå –ë—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: $(echo "$line" | awk '{print $2}')"
                    fi
                fi
            fi
        done < /etc/apt/sources.list
        
        echo "   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–∏–º—É–ª—è—Ü–∏—è): $ACTIVATED_COUNT —Ä–∞–±–æ—á–∏—Ö, $DEACTIVATED_COUNT –Ω–µ—Ä–∞–±–æ—á–∏—Ö"
        log_message "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–∏–º—É–ª—è—Ü–∏—è): $ACTIVATED_COUNT —Ä–∞–±–æ—á–∏—Ö, $DEACTIVATED_COUNT –Ω–µ—Ä–∞–±–æ—á–∏—Ö"
    else
        # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∏–∑–º–µ–Ω—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        cp /etc/apt/sources.list /etc/apt/sources.list.backup
        log_message "–°–æ–∑–¥–∞–Ω backup —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: /etc/apt/sources.list.backup"
        
        TEMP_FILE=$(mktemp)
        echo "# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)" > "$TEMP_FILE"
        
        ACTIVATED_COUNT=0
        DEACTIVATED_COUNT=0
        
        while IFS= read -r line; do
            if [[ "$line" =~ ^#?deb ]]; then
                if [[ "$line" == \#* ]]; then
                    clean_line="${line#\#}"
                    clean_line="$(echo "$clean_line" | sed 's/^[[:space:]]*//')"
                    if check_single_repo "$clean_line"; then
                        echo "$clean_line" >> "$TEMP_FILE"
                        ACTIVATED_COUNT=$((ACTIVATED_COUNT + 1))
                        log_message "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $(echo "$clean_line" | awk '{print $2}')"
                    else
                        echo "$line" >> "$TEMP_FILE"
                        DEACTIVATED_COUNT=$((DEACTIVATED_COUNT + 1))
                        log_message "–û—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $(echo "$clean_line" | awk '{print $2}')"
                    fi
                else
                    if check_single_repo "$line"; then
                        echo "$line" >> "$TEMP_FILE"
                        ACTIVATED_COUNT=$((ACTIVATED_COUNT + 1))
                        log_message "–û—Å—Ç–∞–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $(echo "$line" | awk '{print $2}')"
                    else
                        echo "# $line" >> "$TEMP_FILE"
                        DEACTIVATED_COUNT=$((DEACTIVATED_COUNT + 1))
                        log_message "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $(echo "$line" | awk '{print $2}')"
                    fi
                fi
            else
                echo "$line" >> "$TEMP_FILE"
            fi
        done < /etc/apt/sources.list
        
        UNIQUE_TEMP_FILE=$(mktemp)
        awk '!seen[$0]++' "$TEMP_FILE" > "$UNIQUE_TEMP_FILE"
        mv "$UNIQUE_TEMP_FILE" "$TEMP_FILE"
        
        cp "$TEMP_FILE" /etc/apt/sources.list
        rm -f "$TEMP_FILE"
        
        echo "   ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: $ACTIVATED_COUNT —Ä–∞–±–æ—á–∏—Ö, $DEACTIVATED_COUNT –Ω–µ—Ä–∞–±–æ—á–∏—Ö"
        log_message "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: $ACTIVATED_COUNT —Ä–∞–±–æ—á–∏—Ö, $DEACTIVATED_COUNT –Ω–µ—Ä–∞–±–æ—á–∏—Ö"
    fi
    
    echo ""
    echo "üéâ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≥–æ—Ç–æ–≤!"
    log_message "–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≥–æ—Ç–æ–≤"
    
# ============================================================
# –ë–õ–û–ö 4: GUI –†–ï–ñ–ò–ú
# ============================================================

else
    echo ""
    echo "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è GUI..."
    log_message "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è GUI"
    
    NEED_TKINTER=false
    NEED_PIP=false
    NEED_PYTHON3=false
    
    if ! python3 --version >/dev/null 2>&1; then
        echo "   ‚ùå Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        log_message "Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
        NEED_PYTHON3=true
    else
        echo "   ‚úÖ Python 3 –Ω–∞–π–¥–µ–Ω"
        log_message "Python 3 –Ω–∞–π–¥–µ–Ω - OK"
    fi
    
    if ! python3 -c "import tkinter" >/dev/null 2>&1; then
        echo "   ‚ùå Tkinter –Ω–µ –Ω–∞–π–¥–µ–Ω"
        log_message "Tkinter –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
        NEED_TKINTER=true
    else
        echo "   ‚úÖ Tkinter –Ω–∞–π–¥–µ–Ω"
        log_message "Tkinter –Ω–∞–π–¥–µ–Ω - OK"
    fi
    
    if ! pip3 --version >/dev/null 2>&1; then
        echo "   ‚ùå pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        log_message "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
        NEED_PIP=true
    else
        echo "   ‚úÖ pip3 –Ω–∞–π–¥–µ–Ω"
        log_message "pip3 –Ω–∞–π–¥–µ–Ω - OK"
    fi
    
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if [ "$NEED_PYTHON3" = true ] || [ "$NEED_TKINTER" = true ] || [ "$NEED_PIP" = true ]; then
        echo ""
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã..."
        log_message "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        
        echo ""
        echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤..."
        log_message "–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ (apt-get update)"
        
        if apt-get update -y 2>&1 | tee -a "$LOG_FILE"; then
            echo "   ‚úÖ –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω"
            log_message "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            echo "   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
            log_message "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
        fi
        
        if [ "$NEED_PYTHON3" = true ]; then
            echo "   üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python 3..."
            log_message "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python 3"
            if apt-get install -y python3 2>&1 | tee -a "$LOG_FILE"; then
                echo "     ‚úÖ Python 3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                log_message "Python 3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
                echo "     ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python 3"
                log_message "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python 3"
            fi
        fi
        
        if [ "$NEED_TKINTER" = true ]; then
            echo "   üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Tkinter..."
            log_message "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Tkinter"
            if apt-get install -y python3-tk 2>&1 | tee -a "$LOG_FILE"; then
                echo "     ‚úÖ python3-tk —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                log_message "python3-tk —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
                echo "     ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python3-tk"
                log_message "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python3-tk"
            fi
        fi
        
        if [ "$NEED_PIP" = true ]; then
            echo "   üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip3..."
            log_message "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip3"
            if apt-get install -y python3-pip 2>&1 | tee -a "$LOG_FILE"; then
                echo "     ‚úÖ python3-pip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                log_message "python3-pip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
                echo "     ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python3-pip"
                log_message "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python3-pip"
            fi
        fi
        
        echo ""
        echo "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        log_message "–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (apt-get install -f)"
        if apt-get install -f -y 2>&1 | tee -a "$LOG_FILE"; then
            echo "   ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
            log_message "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        else
            echo "   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
            log_message "–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
        fi
    fi
    
    echo ""
    echo "üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç..."
    log_message "–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    
    echo "   üìã Python 3: $(python3 --version 2>/dev/null || echo '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')"
    echo "   üìã Tkinter: $(python3 -c 'import tkinter; print("—Ä–∞–±–æ—Ç–∞–µ—Ç")' 2>/dev/null || echo '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')"
    echo "   üìã pip3: $(pip3 --version 2>/dev/null || echo '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')"
    log_message "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: Python 3: $(python3 --version 2>/dev/null || echo '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')"
    log_message "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: Tkinter: $(python3 -c 'import tkinter; print("—Ä–∞–±–æ—Ç–∞–µ—Ç")' 2>/dev/null || echo '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')"
    log_message "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: pip3: $(pip3 --version 2>/dev/null || echo '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')"
    
    echo ""
    echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    log_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
fi

# ============================================================
# –ë–õ–û–ö 5: –ó–ê–ü–£–°–ö PYTHON –°–ö–†–ò–ü–¢–ê
# ============================================================

echo ""
if [ "$CONSOLE_MODE" = true ]; then
    echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º..."
    log_message "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"
else
    echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å..."
    log_message "–ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
fi

log_message "–ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç—É: astra-automation.py"
log_message "–õ–æ–≥ —Ñ–∞–π–ª: $LOG_FILE"

if python3 --version >/dev/null 2>&1; then
    echo "   üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º Python 3: $(python3 --version)"
    log_message "–ò—Å–ø–æ–ª—å–∑—É–µ–º Python 3: $(python3 --version)"
    python3 astra-automation.py --log-file "$LOG_FILE" "$@"
    PYTHON_EXIT_CODE=$?
else
    echo "   ‚ùå Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    log_message "–û–®–ò–ë–ö–ê: Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

log_message "Python —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: $PYTHON_EXIT_CODE"
exit $PYTHON_EXIT_CODE