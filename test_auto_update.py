#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Python —Å tkinter
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Python 2.7.16
"""

from __future__ import print_function
import sys
import os
import subprocess

def check_tkinter():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å tkinter"""
    try:
        import Tkinter as tk
        print("‚úÖ tkinter –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except ImportError:
        print("‚ùå tkinter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def update_python_with_tkinter():
    """–û–±–Ω–æ–≤–ª—è–µ–º Python —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π tkinter"""
    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º Python —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π tkinter...")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
        print("   –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
        result = subprocess.call(['apt', '--fix-broken', 'install', '-y'], 
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result == 0:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ Python –∏ tkinter (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤)
        print("   –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ Python –∏ tkinter...")
        packages = [
            'python',
            'python-tk'
        ]
        
        for package in packages:
            print("   –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º: %s" % package)
            try:
                process = subprocess.Popen(['apt-get', 'install', '-y', package], 
                                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                stdout, stderr = process.communicate()
                
                if process.returncode == 0:
                    print("‚úÖ %s —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" % package)
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å %s" % package)
                    if stderr:
                        print("   –û—à–∏–±–∫–∞: %s" % stderr.strip())
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ %s: %s" % (package, str(e)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ tkinter —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
        if check_tkinter():
            print("‚úÖ tkinter —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ùå tkinter –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
        
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s" % str(e))
        return False

def restart_program():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º Python...")
    
    try:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: %s" % str(e))
        return False

def run_gui_mode():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"""
    print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    try:
        import Tkinter as tk
        import tkMessageBox as messagebox
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        root = tk.Tk()
        root.title("Astra Automation - GUI Mode")
        root.geometry("500x300")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(root, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(main_frame, text="Astra Automation", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = tk.Label(main_frame, text="–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        info_label.pack(pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_button = tk.Button(main_frame, text="–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π", 
                               command=lambda: messagebox.showinfo("–¢–µ—Å—Ç", "GUI —Ä–∞–±–æ—Ç–∞–µ—Ç!"))
        test_button.pack(pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        exit_button = tk.Button(main_frame, text="–í—ã—Ö–æ–¥", command=root.quit)
        exit_button.pack()
        
        print("‚úÖ GUI –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        root.mainloop()
        return True
        
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ GUI: %s" % str(e))
        return False

def run_console_mode():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("üíª –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    print("=" * 50)
    print("ASTRA AUTOMATION - CONSOLE MODE")
    print("=" * 50)
    print("Python –≤–µ—Ä—Å–∏—è: %s" % sys.version)
    print("–û–°: %s" % os.name)
    print("–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: %s" % os.getcwd())
    print()
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
    print("2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print("4. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    print()
    print("‚úÖ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    print("=" * 60)
    print("ASTRA AUTOMATION - AUTO UPDATE PYTHON")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root
    if os.geteuid() != 0:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python test_auto_update.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º tkinter
    if check_tkinter():
        print("üéâ tkinter –¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å–∫–∞–µ–º GUI...")
        return run_gui_mode()
    else:
        print("‚ö†Ô∏è tkinter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Python
        if update_python_with_tkinter():
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É...")
            restart_program()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Python, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
            return run_console_mode()
    
    return True

if __name__ == '__main__':
    success = main()
    if success:
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
        sys.exit(1)
