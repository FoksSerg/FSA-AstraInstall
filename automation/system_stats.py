#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è astra-setup.sh
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Python 2.7.16
"""

from __future__ import print_function
import os
import sys
import subprocess
import re

class SystemStats(object):
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–∞–∫–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.updatable_packages = 0
        self.packages_to_update = 0
        self.packages_to_remove = 0
        self.updatable_list = []
        self.packages_to_install = {
            'python': 4,
            'utilities': 5,
            'wine': 3,
            'total': 12
        }
    
    def get_updatable_packages(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        print("üì¶ –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            cmd = ['apt', 'list', '--upgradable']
            result = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            stdout, stderr = result.communicate()
            
            if result.returncode == 0:
                lines = stdout.strip().split('\n')
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ø–∞–∫–µ—Ç—ã
                self.updatable_packages = len(lines) - 1 if len(lines) > 1 else 0
                self.packages_to_update = self.updatable_packages
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
                self.updatable_list = lines[1:6] if len(lines) > 1 else []
                
                print("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" % self.packages_to_update)
                return True
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %s" % stderr.strip())
                return False
                
        except Exception as e:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %s" % str(e))
            return False
    
    def get_autoremove_packages(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è"""
        print("üóëÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è...")
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
            cmd = ['apt-get', 'autoremove', '--simulate']
            result = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            stdout, stderr = result.communicate()
            
            if result.returncode == 0:
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                output = stdout.decode('utf-8', errors='ignore')
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–∫–µ—Ç–æ–≤
                patterns = [
                    r'(\d+)\s+–ø–∞–∫–µ—Ç–æ–≤?\s+–±—É–¥–µ—Ç\s+—É–¥–∞–ª–µ–Ω–æ',
                    r'(\d+)\s+packages?\s+will\s+be\s+removed',
                    r'(\d+)\s+–ø–∞–∫–µ—Ç–æ–≤?\s+–±—É–¥–µ—Ç\s+—É–¥–∞–ª–µ–Ω–æ',
                    r'(\d+)\s+–ø–∞–∫–µ—Ç–æ–≤?\s+–±—É–¥—É—Ç\s+—É–¥–∞–ª–µ–Ω—ã'
                ]
                
                self.packages_to_remove = 0
                for pattern in patterns:
                    match = re.search(pattern, output, re.IGNORECASE)
                    if match:
                        self.packages_to_remove = int(match.group(1))
                        break
                
                print("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" % self.packages_to_remove)
                return True
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: %s" % stderr.strip())
                return False
                
        except Exception as e:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: %s" % str(e))
            return False
    
    def calculate_install_stats(self):
        """–ü–æ–¥—Å—á–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        print("üìã –ü–æ–¥—Å—á–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        # Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        python_packages = ['python3', 'python3-pip', 'python3-apt', 'python3-venv']
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
        utility_packages = ['wget', 'curl', 'git', 'nano', 'htop']
        
        # Wine –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        wine_packages = ['wine', 'winetricks', 'libgl1-mesa-dri', 'libgl1-mesa-glx']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–æ–≤
        python_count = self._check_packages_availability(python_packages)
        utility_count = self._check_packages_availability(utility_packages)
        wine_count = self._check_packages_availability(wine_packages)
        
        self.packages_to_install = {
            'python': python_count,
            'utilities': utility_count,
            'wine': wine_count,
            'total': python_count + utility_count + wine_count
        }
        
        print("   ‚úÖ Python: %d –ø–∞–∫–µ—Ç–æ–≤" % python_count)
        print("   ‚úÖ –£—Ç–∏–ª–∏—Ç—ã: %d –ø–∞–∫–µ—Ç–æ–≤" % utility_count)
        print("   ‚úÖ Wine: %d –ø–∞–∫–µ—Ç–æ–≤" % wine_count)
        print("   ‚úÖ –ò—Ç–æ–≥–æ: %d –ø–∞–∫–µ—Ç–æ–≤" % self.packages_to_install['total'])
        
        return True
    
    def _check_packages_availability(self, packages):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö"""
        try:
            cmd = ['apt-cache', 'show'] + packages
            result = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            stdout, stderr = result.communicate()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            if result.returncode == 0:
                # –ö–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "Package:"
                package_count = stdout.count('Package:')
                return package_count
            else:
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                return len(packages)
                
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            return len(packages)
    
    def display_statistics(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–ï–†–ê–¶–ò–ô:")
        print("====================")
        
        # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑–≤–Ω–µ)
        print("üì° –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:")
        print("   ‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: [–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ repo_checker]")
        print("   ‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: [–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ repo_checker]")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        print("\nüì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
        print("   ‚Ä¢ –ü–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %d" % self.packages_to_update)
        
        if self.packages_to_update > 0 and self.updatable_list:
            print("   ‚Ä¢ –ü–µ—Ä–≤—ã–µ –ø–∞–∫–µ—Ç—ã:")
            for package in self.updatable_list:
                if package.strip():
                    print("     - %s" % package.strip())
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        print("   ‚Ä¢ –ü–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: %d" % self.packages_to_remove)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:")
        print("   ‚Ä¢ Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: %d –ø–∞–∫–µ—Ç–æ–≤" % self.packages_to_install['python'])
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: %d –ø–∞–∫–µ—Ç–æ–≤" % self.packages_to_install['utilities'])
        print("   ‚Ä¢ Wine –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: %d –ø–∞–∫–µ—Ç–æ–≤" % self.packages_to_install['wine'])
        print("   ‚Ä¢ –ò–¢–û–ì–û: %d –ø–∞–∫–µ—Ç–æ–≤" % self.packages_to_install['total'])
    
    def get_full_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'updatable_packages': self.updatable_packages,
            'packages_to_update': self.packages_to_update,
            'packages_to_remove': self.packages_to_remove,
            'packages_to_install': self.packages_to_install,
            'updatable_list': self.updatable_list
        }

def main(dry_run=False):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    stats = SystemStats()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if os.geteuid() != 0:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python system_stats.py")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if not stats.get_updatable_packages():
        print("‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
    if not stats.get_autoremove_packages():
        print("‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if not stats.calculate_install_stats():
        print("‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø–∞–∫–µ—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.display_statistics()
    
    return True

if __name__ == '__main__':
    print("=" * 60)
    print("–¢–µ—Å—Ç –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    success = main()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        sys.exit(1)
