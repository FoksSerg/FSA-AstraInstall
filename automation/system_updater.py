#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Python 2.7.16
"""

from __future__ import print_function
import os
import sys
import subprocess
import re

class SystemUpdater(object):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self):
        self.patterns = {
            'dpkg_config': r'\*\*\* .* \(Y/I/N/O/D/Z\) \[.*\] \?',
            'apt_config': r'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–∫–µ—Ç–∞',
            'keyboard_config': r'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
            'keyboard_switch': r'—Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–∂–¥—É –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π',
            'language_config': r'–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã',
            'restart_services': r'–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—ã –≤–æ –≤—Ä–µ–º—è –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'
        }
        
        self.responses = {
            'dpkg_config': 'Y',      # –°–æ–≥–ª–∞—à–∞–µ–º—Å—è —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
            'apt_config': '',        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (Enter)
            'keyboard_config': '',   # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É (Enter)
            'keyboard_switch': '',   # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (Enter)
            'language_config': '',   # –ü—Ä–∏–Ω–∏–º–∞–µ–º —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã (Enter)
            'restart_services': 'Y'  # –°–æ–≥–ª–∞—à–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±
        }
    
    def detect_interactive_prompt(self, output):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤—ã–≤–æ–¥–µ"""
        for prompt_type, pattern in self.patterns.items():
            if re.search(pattern, output, re.IGNORECASE):
                return prompt_type
        return None
    
    def get_auto_response(self, prompt_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        return self.responses.get(prompt_type, 'Y')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ–≥–¥–∞ "Y"
    
    def run_command_with_interactive_handling(self, cmd, dry_run=False):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if dry_run:
            print("‚ö†Ô∏è –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –∫–æ–º–∞–Ω–¥–∞ –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (—Ç–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è)")
            print("   –ö–æ–º–∞–Ω–¥–∞: %s" % ' '.join(cmd))
            return 0
        
        print("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏...")
        print("   –ö–æ–º–∞–Ω–¥–∞: %s" % ' '.join(cmd))
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            output_buffer = ""
            while True:
                line = process.stdout.readline()
                if not line:
                    break
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É
                print("   %s" % line.rstrip())
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                output_buffer += line
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                prompt_type = self.detect_interactive_prompt(output_buffer)
                if prompt_type:
                    response = self.get_auto_response(prompt_type)
                    if response == '':
                        print("   ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: Enter (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç) –¥–ª—è %s" % prompt_type)
                    else:
                        print("   ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: %s (–¥–ª—è %s)" % (response, prompt_type))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    process.stdin.write(response + '\n')
                    process.stdin.flush()
                    
                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                    output_buffer = ""
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            return_code = process.wait()
            
            if return_code == 0:
                print("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("   ‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: %d)" % return_code)
            
            return return_code
            
        except Exception as e:
            print("   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: %s" % str(e))
            return 1
    
    def update_system(self, dry_run=False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        if dry_run:
            print("‚ö†Ô∏è –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            print("‚úÖ –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: apt-get update && apt-get dist-upgrade -y && apt-get autoremove -y")
            return True
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–∞–∫–µ—Ç–æ–≤...")
        update_cmd = ['apt-get', 'update']
        result = self.run_command_with_interactive_handling(update_cmd, dry_run)
        
        if result != 0:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–∞–∫–µ—Ç–æ–≤")
            return False
        
        # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
        print("\nüöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        upgrade_cmd = ['apt-get', 'dist-upgrade', '-y']
        result = self.run_command_with_interactive_handling(upgrade_cmd, dry_run)
        
        if result == 0:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            print("\nüßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
            autoremove_cmd = ['apt-get', 'autoremove', '-y']
            autoremove_result = self.run_command_with_interactive_handling(autoremove_cmd, dry_run)
            
            if autoremove_result == 0:
                print("‚úÖ –ù–µ–Ω—É–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            else:
                print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
            return False
    
    def simulate_update_scenarios(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print("üß™ –°–∏–º—É–ª—è—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        # –¢–µ—Å—Ç 1: dpkg –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        print("\nüìã –¢–µ—Å—Ç 1: dpkg –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        test_output = """–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ¬´/etc/ssl/openssl.cnf¬ª
==> –ò–∑–º–µ–Ω—ë–Ω —Å –º–æ–º–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤–∞–º–∏ –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º).
==> –ê–≤—Ç–æ—Ä –ø–∞–∫–µ—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.
*** openssl.cnf (Y/I/N/O/D/Z) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é N] ?"""
        
        prompt_type = self.detect_interactive_prompt(test_output)
        if prompt_type:
            response = self.get_auto_response(prompt_type)
            print("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å: %s" % prompt_type)
            if response == '':
                print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: Enter (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
            else:
                print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: %s" % response)
        else:
            print("   ‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±
        print("\nüîÑ –¢–µ—Å—Ç 2: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±")
        test_output = """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—ã –≤–æ –≤—Ä–µ–º—è –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π? [Y/n]"""
        
        prompt_type = self.detect_interactive_prompt(test_output)
        if prompt_type:
            response = self.get_auto_response(prompt_type)
            print("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å: %s" % prompt_type)
            if response == '':
                print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: Enter (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
            else:
                print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: %s" % response)
        else:
            print("   ‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        
        print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    dry_run = False
    if len(sys.argv) > 1 and sys.argv[1] == '--dry-run':
        dry_run = True
    
    print("=" * 60)
    if dry_run:
        print("–¢–µ—Å—Ç –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã (–†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø)")
    else:
        print("–¢–µ—Å—Ç –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    updater = SystemUpdater()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if os.geteuid() != 0:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python system_updater.py")
        sys.exit(1)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updater.simulate_update_scenarios()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    if not dry_run:
        print("\nüîß –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        success = updater.update_system(dry_run)
        
        if success:
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π")
    else:
        print("\n‚ö†Ô∏è –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        updater.update_system(dry_run)
    
    if dry_run:
        print("\n‚úÖ –¢–µ—Å—Ç –º–æ–¥—É–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω! (–†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø)")
    else:
        print("\n‚úÖ –¢–µ—Å—Ç –º–æ–¥—É–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == '__main__':
    main()
