#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
GUI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Astra.IDE
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Python 2.7.16
"""

from __future__ import print_function
import os
import sys
import subprocess
import threading
import time

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è GUI
def install_gui_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è GUI"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è GUI...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tkinter
        import Tkinter as tk
        print("‚úÖ tkinter —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print("‚ö†Ô∏è tkinter –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º python-tk...")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º python-tk
            result = subprocess.call(['apt-get', 'install', '-y', 'python-tk'], 
                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            if result == 0:
                print("‚úÖ python-tk —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python-tk")
                return False
                
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ python-tk: %s" % str(e))
            return False

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º tkinter
if not install_gui_dependencies():
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è GUI")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: sudo apt-get install python-tk")
    sys.exit(1)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º tkinter
import Tkinter as tk

class AutomationGUI(object):
    """GUI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Astra.IDE"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("FSA-AstraInstall Automation")
        self.root.geometry("800x600")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False
        self.dry_run = tk.BooleanVar()
        self.process_thread = None
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root)
        title_frame.pack(fill=tk.X, padx=10, pady=5)
        
        title_label = tk.Label(title_frame, text="FSA-AstraInstall Automation", 
                               font=("Arial", 16, "bold"))
        title_label.pack()
        
        subtitle_label = tk.Label(title_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Astra.IDE")
        subtitle_label.pack()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.LabelFrame(self.root, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è dry-run
        dry_run_check = tk.Checkbutton(control_frame, text="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (dry-run)", 
                                       variable=self.dry_run)
        dry_run_check.pack(side=tk.LEFT, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(control_frame)
        button_frame.pack(side=tk.RIGHT, padx=5, pady=5)
        
        self.start_button = tk.Button(button_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", 
                                      command=self.start_automation)
        self.start_button.pack(side=tk.LEFT, padx=2)
        
        self.stop_button = tk.Button(button_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                     command=self.stop_automation, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=2)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_frame = tk.LabelFrame(self.root, text="–ü—Ä–æ–≥—Ä–µ—Å—Å")
        progress_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.progress_label = tk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É", 
                                      relief=tk.SUNKEN, anchor=tk.W)
        self.progress_label.pack(fill=tk.X, padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = tk.LabelFrame(self.root, text="–°—Ç–∞—Ç—É—Å")
        status_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.status_label = tk.Label(status_frame, text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        self.status_label.pack(padx=5, pady=5)
        
        # –õ–æ–≥
        log_frame = tk.LabelFrame(self.root, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Text —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.log_text = tk.Text(log_frame, height=15, wrap=tk.WORD)
        scrollbar = tk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y, padx=5, pady=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = tk.LabelFrame(self.root, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_frame.pack(fill=tk.X, padx=10, pady=5)
        
        stats_inner = tk.Frame(stats_frame)
        stats_inner.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–æ–ª–æ–Ω–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        tk.Label(stats_inner, text="–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:").grid(row=0, column=0, sticky=tk.W)
        self.repo_label = tk.Label(stats_inner, text="–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        self.repo_label.grid(row=0, column=1, sticky=tk.W, padx=(5, 20))
        
        tk.Label(stats_inner, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:").grid(row=0, column=2, sticky=tk.W)
        self.update_label = tk.Label(stats_inner, text="–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        self.update_label.grid(row=0, column=3, sticky=tk.W, padx=(5, 20))
        
        tk.Label(stats_inner, text="–ü–∞–∫–µ—Ç—ã:").grid(row=1, column=0, sticky=tk.W)
        self.package_label = tk.Label(stats_inner, text="–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        self.package_label.grid(row=1, column=1, sticky=tk.W, padx=(5, 20))
        
        tk.Label(stats_inner, text="–°—Ç–∞—Ç—É—Å:").grid(row=1, column=2, sticky=tk.W)
        self.status_detail_label = tk.Label(stats_inner, text="–û–∂–∏–¥–∞–Ω–∏–µ")
        self.status_detail_label.grid(row=1, column=3, sticky=tk.W, padx=(5, 20))
        
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def update_status(self, status, detail=""):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.config(text=status)
        if detail:
            self.status_detail_label.config(text=detail)
        self.root.update_idletasks()
        
    def update_stats(self, repos=None, updates=None, packages=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if repos is not None:
            self.repo_label.config(text=repos)
        if updates is not None:
            self.update_label.config(text=updates)
        if packages is not None:
            self.package_label.config(text=packages)
        self.root.update_idletasks()
        
    def start_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        if self.is_running:
            return
            
        self.is_running = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.progress_label.config(text="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", bg="lightblue")
        
        # –û—á–∏—â–∞–µ–º –ª–æ–≥
        self.log_text.delete(1.0, tk.END)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.process_thread = threading.Thread(target=self.run_automation)
        self.process_thread.daemon = True
        self.process_thread.start()
        
    def stop_automation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.progress_label.config(text="–ó–∞–≤–µ—Ä—à–µ–Ω–æ", bg="lightgreen")
        self.update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    def run_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.update_status("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            self.log_message("=" * 60)
            self.log_message("FSA-AstraInstall Automation")
            self.log_message("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Astra.IDE")
            self.log_message("=" * 60)
            
            if self.dry_run.get():
                self.log_message("–†–µ–∂–∏–º: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï (dry-run)")
            else:
                self.log_message("–†–µ–∂–∏–º: –†–ï–ê–õ–¨–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê")
            
            self.log_message("")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            import sys
            import os
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
            current_dir = os.path.dirname(os.path.abspath(__file__))
            if current_dir not in sys.path:
                sys.path.insert(0, current_dir)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
            import repo_checker
            import system_stats
            import interactive_handler
            import system_updater
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            self.log_message("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
            self.log_message("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
            self.update_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...", "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
            self.log_message("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
            repo_success = repo_checker.main(self.dry_run.get())
            
            if repo_success:
                self.log_message("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
                return
            
            # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            self.update_status("–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            self.log_message("üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
            stats_success = system_stats.main(self.dry_run.get())
            
            if stats_success:
                self.log_message("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            # 3. –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            self.update_status("–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ")
            self.log_message("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
            interactive_success = interactive_handler.main(self.dry_run.get())
            
            if interactive_success:
                self.log_message("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                return
            
            # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            self.update_status("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            self.log_message("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            update_success = system_updater.main(self.dry_run.get())
            
            if update_success:
                self.log_message("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
                return
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if self.dry_run.get():
                self.update_status("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø)")
                self.log_message("")
                self.log_message("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø)")
            else:
                self.update_status("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                self.log_message("")
                self.log_message("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
        except Exception as e:
            self.update_status("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            self.log_message("‚ùå –û—à–∏–±–∫–∞: %s" % str(e))
            
        finally:
            self.is_running = False
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            self.progress_label.config(text="–ó–∞–≤–µ—Ä—à–µ–Ω–æ", bg="lightgreen")
            
    def parse_status_from_output(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –≤—ã–≤–æ–¥–∞"""
        line = line.strip()
        
        # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        if "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:" in line and "—Ä–∞–±–æ—á–∏—Ö" in line:
            repos = line.split("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:")[1].strip()
            self.update_stats(repos=repos)
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
        elif "–ù–∞–π–¥–µ–Ω–æ" in line and "–ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" in line:
            updates = line.split("–ù–∞–π–¥–µ–Ω–æ")[1].split("–ø–∞–∫–µ—Ç–æ–≤")[0].strip()
            self.update_stats(updates=updates)
            
        # –ü–∞–∫–µ—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        elif "–ò–¢–û–ì–û:" in line and "–ø–∞–∫–µ—Ç–æ–≤" in line:
            packages = line.split("–ò–¢–û–ì–û:")[1].strip()
            self.update_stats(packages=packages)
            
        # –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π
        elif "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤" in line:
            self.update_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...", "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
        elif "–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã" in line:
            self.update_status("–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        elif "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤" in line:
            self.update_status("–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ")
        elif "–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã" in line:
            self.update_status("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.mainloop()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ó–∞–ø—É—Å–∫ GUI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if os.geteuid() != 0:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python gui_monitor.py")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ astra-automation.py
    if not os.path.exists('astra-automation.py'):
        print("‚ùå –§–∞–π–ª astra-automation.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–æ–º astra-automation.py")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º GUI (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
    app = AutomationGUI()
    app.run()

if __name__ == '__main__':
    main()
