#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
FSA-AstraInstall Automation - –ï–¥–∏–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é astra-setup.sh
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Python 2.7.16
"""

from __future__ import print_function
import os
import sys
import tempfile
import subprocess
import shutil

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
EMBEDDED_FILES = {
    'automation/repo_checker.py': '',
    'config/auto_responses.json': ''
}

def get_embedded_repo_checker():
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–¥ repo_checker.py"""
    return '''#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è astra-setup.sh
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Python 2.7.16
"""

from __future__ import print_function
import os
import sys
import subprocess
import tempfile
import shutil
from collections import defaultdict

class RepoChecker(object):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ APT"""
    
    def __init__(self):
        self.sources_list = '/etc/apt/sources.list'
        self.backup_file = '/etc/apt/sources.list.backup'
        self.activated_count = 0
        self.deactivated_count = 0
        self.working_repos = []
        self.broken_repos = []
    
    def backup_sources_list(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ backup —Ñ–∞–π–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        try:
            if os.path.exists(self.sources_list):
                shutil.copy2(self.sources_list, self.backup_file)
                print("‚úÖ Backup —Å–æ–∑–¥–∞–Ω: %s" % self.backup_file)
                return True
            else:
                print("‚ùå –§–∞–π–ª sources.list –Ω–µ –Ω–∞–π–¥–µ–Ω: %s" % self.sources_list)
                return False
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: %s" % str(e))
            return False
    
    def check_repo_availability(self, repo_line):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–¥–Ω–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
            temp_file = tempfile.NamedTemporaryFile(mode='w', delete=False)
            temp_file.write(repo_line + '\\n')
            temp_file.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ apt-get update
            cmd = [
                'apt-get', 'update',
                '-o', 'Dir::Etc::sourcelist=%s' % temp_file.name,
                '-o', 'Dir::Etc::sourceparts=-',
                '-o', 'APT::Get::List-Cleanup=0'
            ]
            
            result = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                preexec_fn=os.setpgrp
            )
            stdout, stderr = result.communicate()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
            
            if result.returncode == 0:
                repo_name = repo_line.split()[1] if len(repo_line.split()) > 1 else repo_line
                print("‚úÖ –†–∞–±–æ—á–∏–π: %s" % repo_name)
                return True
            else:
                repo_name = repo_line.split()[1] if len(repo_line.split()) > 1 else repo_line
                print("‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω: %s" % repo_name)
                return False
                
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: %s" % str(e))
            return False
    
    def process_all_repos(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏–∑ sources.list"""
        print("\\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        print("==========================")
        
        try:
            with open(self.sources_list, 'r') as f:
                lines = f.readlines()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ sources.list
            temp_file = tempfile.NamedTemporaryFile(mode='w', delete=False)
            temp_file.write("# Astra Linux repositories - auto configured\\n")
            
            for line in lines:
                line = line.strip()
                
                if line.startswith('#deb') or line.startswith('deb'):
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                    if line.startswith('#'):
                        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                        clean_line = line[1:].strip()
                        if self.check_repo_availability(clean_line):
                            temp_file.write(clean_line + '\\n')
                            self.activated_count += 1
                            self.working_repos.append(clean_line)
                        else:
                            temp_file.write(line + '\\n')
                            self.deactivated_count += 1
                            self.broken_repos.append(clean_line)
                    else:
                        # –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                        if self.check_repo_availability(line):
                            temp_file.write(line + '\\n')
                            self.activated_count += 1
                            self.working_repos.append(line)
                        else:
                            temp_file.write('# ' + line + '\\n')
                            self.deactivated_count += 1
                            self.broken_repos.append(line)
                else:
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    temp_file.write(line + '\\n')
            
            temp_file.close()
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            self._remove_duplicates(temp_file.name)
            
            return temp_file.name
            
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: %s" % str(e))
            return None
    
    def _remove_duplicates(self, temp_file):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(temp_file, 'r') as f:
                lines = f.readlines()
            
            seen = set()
            unique_lines = []
            for line in lines:
                if line not in seen:
                    seen.add(line)
                    unique_lines.append(line)
            
            with open(temp_file, 'w') as f:
                f.writelines(unique_lines)
                
        except Exception as e:
            print("‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã: %s" % str(e))
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º"""
        return {
            'activated': self.activated_count,
            'deactivated': self.deactivated_count,
            'working_repos': self.working_repos,
            'broken_repos': self.broken_repos
        }
    
    def apply_changes(self, temp_file):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ sources.list"""
        try:
            shutil.copy2(temp_file, self.sources_list)
            print("\\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ sources.list")
            
            print("\\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:")
            with open(self.sources_list, 'r') as f:
                for line in f:
                    if line.strip().startswith('deb '):
                        print("   ‚Ä¢ %s" % line.strip())
            
            return True
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: %s" % str(e))
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("==================================================")
    print("–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
    print("==================================================")
    
    checker = RepoChecker()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if os.geteuid() != 0:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å /etc/apt/sources.list")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python repo_checker.py")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º backup
    if not checker.backup_sources_list():
        sys.exit(1)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    temp_file = checker.process_all_repos()
    if not temp_file:
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = checker.get_statistics()
    print("\\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í:")
    print("=========================")
    print("üì° –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:")
    print("   ‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: %d —Ä–∞–±–æ—á–∏—Ö" % stats['activated'])
    print("   ‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: %d –Ω–µ—Ä–∞–±–æ—á–∏—Ö" % stats['deactivated'])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if checker.apply_changes(temp_file):
        print("\\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    # –û—á–∏—Å—Ç–∫–∞
    try:
        os.unlink(temp_file)
    except:
        pass

if __name__ == '__main__':
    main()
'''

def get_embedded_config():
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è auto_responses.json"""
    return '''{
    "description": "–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å–∏—Å—Ç–µ–º—ã",
    "rules": {
        "openssl.cnf": "N",
        "keyboard-configuration": "Y", 
        "default": "N"
    },
    "interactive_patterns": {
        "dpkg_config": "\\\\*\\\\*\\\\* .* \\\\(Y/I/N/O/D/Z\\\\) \\\\[.*\\\\] \\\\?",
        "apt_config": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–∫–µ—Ç–∞",
        "keyboard_config": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
    }
}'''

def create_embedded_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    embedded_data = {}
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    project_root = os.path.dirname(os.path.abspath(__file__))
    print("   –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: %s" % project_root)
    
    # automation/repo_checker.py
    repo_checker_path = os.path.join(project_root, 'automation', 'repo_checker.py')
    print("   –ò—â–µ–º: %s" % repo_checker_path)
    if os.path.exists(repo_checker_path):
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞, —á–∏—Ç–∞–µ–º...")
        with open(repo_checker_path, 'r') as f:
            embedded_data['automation/repo_checker.py'] = f.read()
        print("   ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω (%d —Å–∏–º–≤–æ–ª–æ–≤)" % len(embedded_data['automation/repo_checker.py']))
    else:
        print("   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
        embedded_data['automation/repo_checker.py'] = get_embedded_repo_checker()
        print("   ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (%d —Å–∏–º–≤–æ–ª–æ–≤)" % len(embedded_data['automation/repo_checker.py']))
    
    # config/auto_responses.json
    config_path = os.path.join(project_root, 'config', 'auto_responses.json')
    print("   –ò—â–µ–º: %s" % config_path)
    if os.path.exists(config_path):
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞, —á–∏—Ç–∞–µ–º...")
        with open(config_path, 'r') as f:
            embedded_data['config/auto_responses.json'] = f.read()
        print("   ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω (%d —Å–∏–º–≤–æ–ª–æ–≤)" % len(embedded_data['config/auto_responses.json']))
    else:
        print("   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
        embedded_data['config/auto_responses.json'] = get_embedded_config()
        print("   ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (%d —Å–∏–º–≤–æ–ª–æ–≤)" % len(embedded_data['config/auto_responses.json']))
    
    print("üìã –ò—Ç–æ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: %d" % len(embedded_data))
    return embedded_data

def extract_embedded_files():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
    print("üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_dir = tempfile.mkdtemp(prefix='astra-automation-')
    print("   –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: %s" % temp_dir)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    embedded_data = create_embedded_data()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    automation_dir = os.path.join(temp_dir, 'automation')
    config_dir = os.path.join(temp_dir, 'config')
    print("   –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏: %s, %s" % (automation_dir, config_dir))
    os.makedirs(automation_dir)
    os.makedirs(config_dir)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã
    print("   –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã...")
    for file_path, content in embedded_data.items():
        full_path = os.path.join(temp_dir, file_path)
        print("     –ó–∞–ø–∏—Å—ã–≤–∞–µ–º: %s (%d —Å–∏–º–≤–æ–ª–æ–≤)" % (file_path, len(content)))
        
        with open(full_path, 'w') as f:
            f.write(content)
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –¥–ª—è Python —Ñ–∞–π–ª–æ–≤
        if file_path.endswith('.py'):
            os.chmod(full_path, 0755)
            print("     ‚úÖ –°–¥–µ–ª–∞–Ω–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º: %s" % file_path)
        else:
            print("     ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω: %s" % file_path)
    
    print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏:")
    for root, dirs, files in os.walk(temp_dir):
        level = root.replace(temp_dir, '').count(os.sep)
        indent = ' ' * 2 * level
        print("   %s%s/" % (indent, os.path.basename(root)))
        subindent = ' ' * 2 * (level + 1)
        for file in files:
            print("   %s%s" % (subindent, file))
    
    return temp_dir

def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root
    if os.geteuid() != 0:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python astra-automation.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info[0] != 2 or sys.version_info[1] < 7:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 2.7+")
        print("   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: %s" % sys.version)
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ apt-get
    try:
        subprocess.check_call(['which', 'apt-get'], 
                            stdout=subprocess.PIPE, 
                            stderr=subprocess.PIPE)
        print("‚úÖ apt-get –Ω–∞–π–¥–µ–Ω")
    except subprocess.CalledProcessError:
        print("‚ùå apt-get –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ Debian/Ubuntu —Å–∏—Å—Ç–µ–º–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ sources.list
    sources_list = '/etc/apt/sources.list'
    if not os.path.exists(sources_list):
        print("‚ùå –§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω" % sources_list)
        return False
    
    print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def run_repo_checker(temp_dir):
    """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
    
    repo_checker_path = os.path.join(temp_dir, 'automation', 'repo_checker.py')
    print("   –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é: %s" % repo_checker_path)
    
    if not os.path.exists(repo_checker_path):
        print("‚ùå –ú–æ–¥—É–ª—å repo_checker.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ automation:")
        automation_dir = os.path.join(temp_dir, 'automation')
        if os.path.exists(automation_dir):
            for file in os.listdir(automation_dir):
                print("     - %s" % file)
        else:
            print("     –ü–∞–ø–∫–∞ automation –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return False
    
    print("   ‚úÖ –ú–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
    print("   –ö–æ–º–∞–Ω–¥–∞: %s %s" % (sys.executable, repo_checker_path))
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        result = subprocess.call([sys.executable, repo_checker_path])
        
        print("   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: %d" % result)
        
        if result == 0:
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–∫–æ–¥: %d)" % result)
            return False
            
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: %s" % str(e))
        return False

def cleanup_temp_files(temp_dir):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        shutil.rmtree(temp_dir)
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print("‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: %s" % str(e))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("FSA-AstraInstall Automation")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Astra.IDE")
    print("=" * 60)
    
    temp_dir = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if not check_system_requirements():
            sys.exit(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_dir = extract_embedded_files()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        success = run_repo_checker(temp_dir)
        
        if success:
            print("\nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\nüí• –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print("\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s" % str(e))
        sys.exit(1)
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_dir:
            cleanup_temp_files(temp_dir)

if __name__ == '__main__':
    main()
