#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
FSA-AstraInstall Automation - –ï–¥–∏–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é astra-setup.sh
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Python 2.7.16
"""

from __future__ import print_function
import os
import sys
import tempfile
import subprocess
import shutil

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
EMBEDDED_FILES = {
    'automation/repo_checker.py': '',
    'config/auto_responses.json': ''
}

def create_embedded_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    embedded_data = {}
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    project_root = os.path.dirname(os.path.abspath(__file__))
    
    # automation/repo_checker.py
    repo_checker_path = os.path.join(project_root, 'automation', 'repo_checker.py')
    if os.path.exists(repo_checker_path):
        with open(repo_checker_path, 'r') as f:
            embedded_data['automation/repo_checker.py'] = f.read()
    
    # config/auto_responses.json
    config_path = os.path.join(project_root, 'config', 'auto_responses.json')
    if os.path.exists(config_path):
        with open(config_path, 'r') as f:
            embedded_data['config/auto_responses.json'] = f.read()
    
    return embedded_data

def extract_embedded_files():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
    print("üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_dir = tempfile.mkdtemp(prefix='astra-automation-')
    print("   –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: %s" % temp_dir)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    embedded_data = create_embedded_data()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    automation_dir = os.path.join(temp_dir, 'automation')
    config_dir = os.path.join(temp_dir, 'config')
    os.makedirs(automation_dir)
    os.makedirs(config_dir)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã
    for file_path, content in embedded_data.items():
        full_path = os.path.join(temp_dir, file_path)
        with open(full_path, 'w') as f:
            f.write(content)
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –¥–ª—è Python —Ñ–∞–π–ª–æ–≤
        if file_path.endswith('.py'):
            os.chmod(full_path, 0755)
        
        print("   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω: %s" % file_path)
    
    return temp_dir

def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root
    if os.geteuid() != 0:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python astra-automation.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info[0] != 2 or sys.version_info[1] < 7:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 2.7+")
        print("   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: %s" % sys.version)
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ apt-get
    try:
        subprocess.check_call(['which', 'apt-get'], 
                            stdout=subprocess.PIPE, 
                            stderr=subprocess.PIPE)
        print("‚úÖ apt-get –Ω–∞–π–¥–µ–Ω")
    except subprocess.CalledProcessError:
        print("‚ùå apt-get –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ Debian/Ubuntu —Å–∏—Å—Ç–µ–º–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ sources.list
    sources_list = '/etc/apt/sources.list'
    if not os.path.exists(sources_list):
        print("‚ùå –§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω" % sources_list)
        return False
    
    print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def run_repo_checker(temp_dir):
    """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
    
    repo_checker_path = os.path.join(temp_dir, 'automation', 'repo_checker.py')
    
    if not os.path.exists(repo_checker_path):
        print("‚ùå –ú–æ–¥—É–ª—å repo_checker.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        result = subprocess.call([sys.executable, repo_checker_path])
        
        if result == 0:
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: %s" % str(e))
        return False

def cleanup_temp_files(temp_dir):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        shutil.rmtree(temp_dir)
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print("‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: %s" % str(e))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("FSA-AstraInstall Automation")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Astra.IDE")
    print("=" * 60)
    
    temp_dir = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if not check_system_requirements():
            sys.exit(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_dir = extract_embedded_files()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        success = run_repo_checker(temp_dir)
        
        if success:
            print("\nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\nüí• –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print("\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s" % str(e))
        sys.exit(1)
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_dir:
            cleanup_temp_files(temp_dir)

if __name__ == '__main__':
    main()
